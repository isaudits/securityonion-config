# Mutations borrowed from https://github.com/HASecuritySolutions/Logstash/blob/master/configfiles/6300_windows.conf

filter {
    if [type] == "wineventlog" {
        mutate {
            #Sometimes param1 contains a date which can wind up creating an index conflict
            convert => [ "event_data.param1", "string" ]
        }

        if [event_data][Application] {
          grok {
            match => { "Application" => "\\device\\harddiskvolume%{INT}\\%{GREEDYDATA:ApplicationPath}" }
          }
          if [event_data][ApplicationPath] {
            mutate {
              add_field => { "ApplicationPathIgnoringx86" => "%{ApplicationPath}" }
            }
            mutate {
              gsub => [ "ApplicationPathIgnoringx86", "program files (x86)", "program files" ]
            }
          }
        }
        if [event_id] == 4634 {
          mutate {
            add_tag => [ "logoff" ]
          }
        }
        if [event_id] == 4624 or [event_id] == 528 or [event_id] == 540 or [event_id] == 552 or [event_id] == 682 or [event_id] == 4648 or [event_id] == 4778 {
          mutate {
            add_tag => [ "logon" ]
            add_tag => [ "alert_data" ]
          }
        }
        if [event_id] == 529 or [event_id] == 4625 or [event_id] == 530 or [event_id] == 531 or [event_id] == 532 or [event_id] == 533 or [event_id] == 534 or [event_id] == 535 or [event_id] == 536 or [event_id] == 536 or [event_id] == 537 or [event_id] == 538 or [event_id] == 539 or [event_id] == 4625 or [event_id] == 4771 {
          mutate {
            add_tag => [ "logon_failure" ]
            add_tag => [ "alert_data" ]
          }
        }
        # Critical event IDs to monitor
        if [event_id] == 7030 or [event_id] == 4720 or [event_id] == 4722 or [event_id] == 4724 or [event_id] == 4738 or [event_id] == 4732 or [event_id] == 1102 or [event_id] == 1056 or [event_id] == 2003 or [event_id] == 2005 or [event_id] == 8003 or [event_id] == 8004 or [event_id] == 8006 or [event_id] == 8007 {
          mutate {
            add_tag => [ "alert_data" ]
          }
        }
        if [event_data][CommandLine] {
          ruby {
            code => "event.set('command_line_length', event.get('CommandLine').length)"
          }
          grok {
            match => { "CommandLine" => "(?<possible_base64_code>[A-Za-z0-9+/]{50,}[=]{0,2})" }
            tag_on_failure => []
          }
        }
        # Ignore broadcasts received by Sysmon
        if [event_id] == 3 and [event_data][SourceIp] =~ "255$" { drop {} }
        if [event_id] == 3 and [event_data][DestinationIp] =~ "255$" { drop {} }
    
        mutate {
            #rename event_data fields that we want to keep data separately for query / analysis
            rename => [ "event_data.AccountName", "user" ]
            rename => [ "event_data.AccountType", "account_type" ]
            rename => [ "event_data.ActivityID", "activity_id" ]
            rename => [ "event_data.Category", "category" ]
            rename => [ "event_data.ClientAddress", "client_ip" ]
            rename => [ "event_data.DestAddress", "destination_ip" ]
            rename => [ "event_data.DestPort", "destination_port" ]
            rename => [ "event_data.EventType", "event_type" ]
            rename => [ "event_data.IPAddress", "source_ip" ]
            rename => [ "event_data.Ipaddress", "source_ip" ]
            rename => [ "event_data.IpAddress", "source_ip" ]
            rename => [ "event_data.IPPort", "source_port" ]
            rename => [ "event_data.PreAuthType", "preauthentication_type" ]
            rename => [ "event_data.PrincipleSAMName", "user" ]
            rename => [ "event_data.ProcessID", "process_id" ]
            rename => [ "event_data.ProcessId", "process_id" ]
            rename => [ "event_data.ProcessName", "process_name" ]
            rename => [ "event_data.RemoteAddress", "destination_ip" ]
            rename => [ "event_data.ServiceName", "service_name" ]
            rename => [ "event_data.ServiceID", "service_id" ]
            rename => [ "event_data.SeverityValue", "severity_value" ]
            rename => [ "event_data.SourceAddress", "source_ip" ]
            rename => [ "event_data.SourcePort", "source_port" ]
            rename => [ "event_data.SourceModuleName", "source_module_name" ]
            rename => [ "event_data.SourceModuleType", "source_module_type" ]
            rename => [ "event_data.SourceName", "source_name" ]
            rename => [ "event_data.TargetUserName", "user" ]
            rename => [ "event_data.User_ID", "user" ]
            rename => [ "event_data.UserID", "user" ]
            rename => [ "event_data.username", "user" ]
            
            rename => [ "user.name", "user" ]
            
            #Delete event_data fields that we don't need presented separately; data is still included in message field
            remove_field => [ "event_data.HandleId" ]
            remove_field => [ "event_data.NewSd" ]
            remove_field => [ "event_data.ObjectName" ]
            remove_field => [ "event_data.ObjectServer" ]
            remove_field => [ "event_data.ObjectType" ]
            remove_field => [ "event_data.OldSd" ]
            remove_field => [ "event_data.SubjectDomainName" ]
            remove_field => [ "event_data.SubjectLogonId" ]
            remove_field => [ "event_data.SubjectUserName" ]
            remove_field => [ "event_data.SubjectUserSid" ]
        }
        mutate {
            convert => [ "command_line_length", "integer" ]
            convert => [ "destination_port", "integer" ]
            convert => [ "source_port", "integer" ]
        }


        # For any accounts that are service accounts or special accounts add the tag of service_account
        # This example applies the tag to any username that starts with SVC_.  If you use a different
        # standard change this.
        if [user] =~ "^DWM-*" or [user] == "SYSTEM" or [user] == "NETWORK SERVICE" or [user] == "LOCAL SERVICE" or [user] =~ "^SVC_*" {
          mutate {
            add_tag => [ "service_account" ]
          }
        }
        # This looks for events that are typically noisy but may be of use for deep dive investigations
        # A tag of noise is added to quickly filter out noise
        if [event_id] == 7036 or [source_name] == "Desktop Window Manager" or [category] == "Engine Lifecycle" or [category] == "Provider Lifecycle" {
          mutate {
            add_tag => [ "noise" ]
          }
        }
        #Identify machine accounts
        if [user] =~ /\$/ {
          mutate {
            add_tag => [ "machine", "noise" ]
          }
        }

        mutate {
            #add_tag => [ "conf_file_6900_tjs"]
        }

    }
}